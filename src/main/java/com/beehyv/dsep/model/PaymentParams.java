package com.beehyv.dsep.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * This object contains all the values necessary to initiate a payment flow.
 */

@Schema(name = "Payment_params", description = "This object contains all the values necessary to initiate a payment flow.")
@JsonTypeName("Payment_params")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-25T15:22:03.145011300+05:30[Asia/Calcutta]")
public class PaymentParams extends HashMap<String, String> {

  @JsonProperty("amount")
  private BigDecimal amount;

  @JsonProperty("currency")
  private String currency;

  @JsonProperty("transaction_id")
  private String transactionId;

  @JsonProperty("bank_account_number")
  private String bankAccountNumber;

  @JsonProperty("bank_code")
  private String bankCode;

  @JsonProperty("bank_id_type")
  private String bankIdType;

  @JsonProperty("virtual_payment_address")
  private String virtualPaymentAddress;

  public PaymentParams amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The numeric value of the amount that has to be paid for the order
   * @return amount
  */
  @Valid 
  @Schema(name = "amount", description = "The numeric value of the amount that has to be paid for the order", required = false)
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public PaymentParams currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
  */
  @NotNull 
  @Schema(name = "currency", required = true)
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public PaymentParams transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The transaction reference string that is generated by the payment interface once a transaction is successful. If the payment happened directly on a payment interface of a BPP, then the BPP must return this value to the BAP in the on_confirm API callback. If the payment was collected at the BAP, then this value has to be sent to the BPP when calling the confirm API. When the BAP actually settles the amount with the BPP, it must send this value as reference so that the BPP can mark the payment as settled.
   * @return transactionId
  */
  
  @Schema(name = "transaction_id", description = "The transaction reference string that is generated by the payment interface once a transaction is successful. If the payment happened directly on a payment interface of a BPP, then the BPP must return this value to the BAP in the on_confirm API callback. If the payment was collected at the BAP, then this value has to be sent to the BPP when calling the confirm API. When the BAP actually settles the amount with the BPP, it must send this value as reference so that the BPP can mark the payment as settled.", required = false)
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  public PaymentParams bankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

  /**
   * Get bankAccountNumber
   * @return bankAccountNumber
  */
  
  @Schema(name = "bank_account_number", required = false)
  public String getBankAccountNumber() {
    return bankAccountNumber;
  }

  public void setBankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }

  public PaymentParams bankCode(String bankCode) {
    this.bankCode = bankCode;
    return this;
  }

  /**
   * Get bankCode
   * @return bankCode
  */
  
  @Schema(name = "bank_code", required = false)
  public String getBankCode() {
    return bankCode;
  }

  public void setBankCode(String bankCode) {
    this.bankCode = bankCode;
  }

  public PaymentParams bankIdType(String bankIdType) {
    this.bankIdType = bankIdType;
    return this;
  }

  /**
   * Get bankIdType
   * @return bankIdType
  */
  
  @Schema(name = "bank_id_type", required = false)
  public String getBankIdType() {
    return bankIdType;
  }

  public void setBankIdType(String bankIdType) {
    this.bankIdType = bankIdType;
  }

  public PaymentParams virtualPaymentAddress(String virtualPaymentAddress) {
    this.virtualPaymentAddress = virtualPaymentAddress;
    return this;
  }

  /**
   * Get virtualPaymentAddress
   * @return virtualPaymentAddress
  */
  
  @Schema(name = "virtual_payment_address", required = false)
  public String getVirtualPaymentAddress() {
    return virtualPaymentAddress;
  }

  public void setVirtualPaymentAddress(String virtualPaymentAddress) {
    this.virtualPaymentAddress = virtualPaymentAddress;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentParams paymentParams = (PaymentParams) o;
    return Objects.equals(this.amount, paymentParams.amount) &&
        Objects.equals(this.currency, paymentParams.currency) &&
        Objects.equals(this.transactionId, paymentParams.transactionId) &&
        Objects.equals(this.bankAccountNumber, paymentParams.bankAccountNumber) &&
        Objects.equals(this.bankCode, paymentParams.bankCode) &&
        Objects.equals(this.bankIdType, paymentParams.bankIdType) &&
        Objects.equals(this.virtualPaymentAddress, paymentParams.virtualPaymentAddress) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, transactionId, bankAccountNumber, bankCode, bankIdType, virtualPaymentAddress, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentParams {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    bankIdType: ").append(toIndentedString(bankIdType)).append("\n");
    sb.append("    virtualPaymentAddress: ").append(toIndentedString(virtualPaymentAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

